require 'uri'

# A NAWS Context collects together the general information necessary to use
# an AWS service. It keeps a Naws::Authentication object for requests to use,
# it controls access to the Naws::Transport, and it keeps the XML namespace
# and base URI used for requests.
#
# Libraries for each AWS service should inherit from this class.
class Naws::Context

  # Creates a new context. All attributes can be set here or after the context
  # is created.
  #
  #   Naws::Context.new(
  #     :authentication => Naws::Authentication.new("KEY_ID", "KEY"),
  #     :uri => "http://example.com/apibase",
  #     :xmlns => "http://example.com/ns/api-1.0",
  #     :transport => :net_http
  #   )
  # 
  # Refer to #authentication=, #uri=, #xmlns=, #transport= for values.
  def initialize(options = {})
    if options[:access_key_id].kind_of?(String) and options[:secret_access_key].kind_of?(String)
      self.authentication = Naws::Authentication.new(options[:access_key_id], options[:secret_access_key])
    else
      self.authentication = options[:authentication]
    end
    self.uri = options[:uri] if options[:uri]
    self.xmlns = options[:xmlns] if options[:xmlns]
    self.transport = options[:transport] if options[:transport]
  end

  # The main XML namespace which should be used for XML requests generated
  # by this context. This is primarily here to permit simple switching between
  # API versions.
  attr_accessor :xmlns

  # Returns the Naws::Transport this context is currently configured to use.
  attr_reader :transport

  # Configures this context to use a new Naws::Transport. If +value+ is a
  # Symbol, it is resolved into a class.
  #
  # Example:
  #   
  #   context.transport = :net_http
  #   context.transport.class.name  # => "Naws::NetHttpTransport"
  def transport=(value)
    self.transport = resolve_transport(value)
  end
  
  # The base URI used for requests generated by this API. The value returned
  # is an instance of the +URI+ class.
  attr_reader :uri

  # Sets the base URI used for requests generated by this API. If a string is
  # passed, it is parsed with +URI.parse+.
  def uri=(value)
    if value.kind_of?(URI)
      @uri = value
    else
      self.uri = URI.parse(value.to_s)
    end
  end

  # Returns the authentication object this context is currently configured to use.
  attr_reader :authentication
  
  # Configures this context to use a new authentication object.
  def authentication=(value)
    if value.nil? or value.respond_to?(:aws_signature)
      @authentication = value
    else
      raise ArgumentError, "authentication object must respond to #aws_signature"
    end
  end

  # Looks up a request class for this context and instantiates it with the given
  # +params+ and +options+. +name+ should be a Symbol and is translated thus:
  #
  #   context.class.name # => Naws::Baz::Context
  #   context.request(:foo_bar).class.name # => "Naws::Baz::FooBarRequest"
  def request(name, params = {}, options = {})
    resolve_request_class("#{name}_request").new(self, params, options)
  end

  # Looks up and creates a request for this context (with #request) and
  # immediately executes it (with #execute_request).
  def execute(name, params = {}, options = {}, &callback)
    execute_request(request(name, params, options), &callback)
  end

  # Executes the given request across this context's transport. If a +callback+
  # is provided, the request will be executed asynchronously (if possible) and
  # the callback called when the request completes (see
  # Naws::Transport#execute).
  def execute_request(request, &callback)
    transport.execute(request, request.response_class, &callback)
  end

  # Returns the time which should be used for AWS request timestamps. This time
  # is used to prevent duplicate requests and for generating authentication
  # signatures.
  #
  # TODO: it should be possible to calibrate this to the published AWS time.
  def aws_time
    Time.now
  end

  protected

    def resolve_request_class(name)
      Naws::Util.constantize(const_prefix + "::" + Naws::Util.camelize(name))
    end
    
    def resolve_transport(transport)
      if transport.kind_of?(Symbol)
        resolve_transport_class(transport).new
      else
        transport
      end
    end

    def resolve_transport_class(name)
      Naws::Util.constantize("Naws::" + Naws::Util.camelize("#{name}_transport"))
    end

    def const_prefix
      self.class.name.split("::")[0..-2].join("::")
    end

end
